[package]
name = ""
version = "0.1.0"
edition = "2021"

[dependencies]


# windows crate feature search: https://microsoft.github.io/windows-rs/features/#/0.58.0
# windows crate Rust docs: https://microsoft.github.io/windows-docs-rs/doc/windows/
# windows-sys crate docs: https://docs.rs/windows-sys/0.59.0/windows_sys/
# kenny kerr: https://kennykerr.ca/rust-getting-started/
[dependencies.windows]

# `windows` includes function bodies and trait implementations and the like; closer to idiomatic Rust in 
# that structs will have functions attached.
# `windows-sys` is raw C/C++-style bindings (ie, no impls for structs); lots of pointers and memory dereferencing,
# more like writing C than Rust
version = "0.58"
features = [
    "Win32_Foundation",
    "Win32_Security",
    "Win32_System_Threading",
    "Win32_System_Memory",    
    "Win32_System_LibraryLoader",
    "Win32_System_Diagnostics_Debug",
    "Win32_System_Kernel",
    "Win32_System_WindowsProgramming",
    "Win32_System_SystemServices",
    "Win32_System_Diagnostics_Debug",
    "Win32_System_SystemInformation",
]

[profile.release]
# see [profiles ref](https://doc.rust-lang.org/cargo/reference/profiles.html) for details

# `cargo build --release` build settings to optimize for binary size and obfuscation
opt-level = "s"     # optimizes binary size while vectorizing loops; slightly greater binary size vs. "z"
                    # flag but makes disassembly slightly more cursed. usually worth checking the
                    # differences between all of the 'optimal' ["s", "z", 3] flags.

debug = false       # default for `release` profile; (0, false, "none").

lto = true          # try to optimize all crates within dependency graph
strip = "symbols"   # strip debug info + symbols from binary
codegen-units = 1   # faster binary at the cost of longer compile time
panic = "abort"     # terminate process on panic; do not unwind stack
